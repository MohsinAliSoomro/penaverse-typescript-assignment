import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { IQuestion } from "../types";
import { getQuestions } from "../services/axios";
import { shuffle } from "../utils/shaffle";
interface IAnswer {
  questionId: string;
  answer: string;
}

const Home: NextPage = () => {
  const [state, setState] = useState({
    isQuesionLoaded: false,
    isLoading: false,
  });
  const [questions, setQuestions] = useState<IQuestion[]>([]);
  const [questionNumber, setQuestionNumber] = useState<number>(0);
  const [answers, setAnswers] = useState<IAnswer[]>([]);
  const [questionAnswer, setQuestionAnswer] = useState<string[][]>([]);
  const fetchQuestion = async () => {
    setQuestionNumber(0);
    setAnswers([]);
    setState({ ...state, isLoading: true });
    const response = await getQuestions();
    if (response !== null) {
      setQuestions(response);
      const qa =
        response &&
        response.map((q) => {
          const copy = [...q.incorrectAnswers];
          copy.push(q.correctAnswer);
          console.log({
            copy,
            correctAnswer: q.correctAnswer,
            question: q.incorrectAnswers,
          });
          return shuffle(copy);
        });
      setQuestionAnswer(qa as string[][]);
      setState({ ...state, isLoading: false, isQuesionLoaded: true });
    }
  };

  const handleAnswer = ({ questionId, answer }: IAnswer) => {
    setAnswers([...answers, { questionId, answer }]);
    setTimeout(() => {
      setQuestionNumber(questionNumber + 1);
    }, 200);
  };
  return (
    <div className="flex justify-center items-center bg-gradient-to-r from-cyan-500 to-blue-500 h-screen text-white">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full lg:w-6/12 border shadow rounded-2xl">
        <h1 className="font-bold text-center my-8 text-3xl">Quiz App</h1>
        {!state.isQuesionLoaded && (
          <div className="flex justify-center my-8">
            <button className="border  p-3 rounded-lg" onClick={fetchQuestion}>
              Start Game
            </button>
          </div>
        )}
        {questionNumber === 5 ? (
          <div>
            {answers.map((answer) => {
              const correctAnswer = questions.find(
                (item) => item.id === answer.questionId
              )?.correctAnswer;
              return (
                <div
                  key={answer.questionId}
                  className={`${
                    answer.answer === correctAnswer
                      ? "bg-green-500"
                      : "bg-red-500"
                  }  border rounded-lg p-4`}
                >
                  <p>Your Answer : {answer.answer}</p>
                  <p>Correct Answer : {correctAnswer}</p>
                </div>
              );
            })}
            <button
              className="w-full p-3 border my-3 rounded-lg"
              onClick={fetchQuestion}
            >
              Again
            </button>
          </div>
        ) : (
          <>
            {state.isLoading ? (
              <div className="font-bold text-center">Loading...</div>
            ) : (
              questions.length > 0 && (
                <div className="p-4">
                  <h1 className="font-bold">Question {questionNumber + 1}</h1>
                  <p className="text-2xl font-bold">
                    {questions[questionNumber].question}
                  </p>
                  <p>Category : {questions[questionNumber].tags[0]}</p>
                  <ul>
                    {questionAnswer[questionNumber].map((item, index) => (
                      <li
                        onClick={() =>
                          handleAnswer({
                            questionId: questions[questionNumber].id,
                            answer: item,
                          })
                        }
                        className="border p-3 my-2 rounded-lg font-bold cursor-pointer hover:bg-sky-400"
                        key={index}
                      >
                        <span>{index + 1}</span> {item}
                      </li>
                    ))}
                  </ul>
                </div>
              )
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Home;
